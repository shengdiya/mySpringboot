<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myapp.demo.Dao.UserDao">
	<!-- 根据用户名密码查询一个用户信息 -->
	<select id="selectUserId" resultType="Integer">
		select userId from user where userName = #{userName} and password = #{password}
	</select>
	
	<!-- 根据用户Id查找用户 -->
	<select id="selectUserById" resultType="com.myapp.demo.Entiy.User">
		select * from user where userId = #{userId}
	</select>
	
	<!-- 根据用户名查找用户 -->
	<select id="selectUserByuserName" resultType="com.myapp.demo.Entiy.User">
		select * from user where userName = #{userName}
	</select>
	
	<!-- 查找所有用户 -->
	<select id="selectAllUsers" resultType="com.myapp.demo.Entiy.User" >
		select * from user
	</select>
	
	<!-- 在uesr_role表中根据用户id识别用户身份 -->
	<select id="selectRoleByuserId" resultType="Integer">
		select roleId from user_role where userId = #{userId}
	</select>
	
	<!-- 根据角色Id查找角色名 -->
	<select id="selectRoleById" resultType="String">
		select roleName from role where roleId = #{roleId}
	</select>
	
	<!-- admin添加一个工作人员 -->
	<!-- 当调用这个adminInsertStaff方法后，它的返回值将会是一个整数，表示插入操作影响的行数（通常情况下，插入单条记录成功则返回1，失败则返回0）。
		   同时，传入的User对象将自动被更新，userId字段被设为数据库生成的新主键值。 -->
	<insert id="adminInsertStaff" useGeneratedKeys="true" keyProperty="userId">
		insert into user (userId,userName,password,realName,telephone,email,address,sexy,number,whichUnit,createTime,isRegister,status,picturePath) 
			values(#{userId},#{userName},#{password},#{realName},#{telephone},#{email},#{address},#{sexy},#{number},#{whichUnit},#{createTime},#{isRegister},#{status},#{picturePath})
	</insert>
	<!-- 工作人员添加后同时更新user_role表  -->
	<insert id="insertStaffRole">
		insert into user_role (userId,roleId) values(#{userId},#{roleId})
	</insert>
	
	<!-- 一个普通用户的注册 -->
	<insert id="insertRaeder" useGeneratedKeys="true" keyProperty="userId"> 
		insert into user(userId,userName,password,realName,telephone,email,address,sexy,createTime,isRegister,status,picturePath)
			values(#{userId},#{userName},#{password},#{realName},#{telephone},#{email},#{address},#{sexy},#{createTime},#{isRegister},#{status},#{picturePath})
	</insert>
	<!-- raeder注册后同时更新user_role表  -->
	<insert id="insertReaderRole">
		insert into user_role (userId,roleId) values(#{userId},#{roleId})
	</insert>
	
	<!-- 查找一类角色的所有用户，用于用户名查重 -->
	<select id="selectAllusersInOneRole" resultType="com.myapp.demo.Entiy.User">
		select * from user
		inner join user_role on user.userId = user_role.userId
		where user_role.roleId = #{roleId}
	</select>
	
	<!-- 根据用户Id删除一个用户 (user表)-->
	<delete id="deleteUser">
        delete from user where userId = #{userId}
    </delete>
    <!-- 根据用户Id删除一个用户 (user_role表)  -->
    <delete id="deleteUserRole">
        delete from user_role where userId = #{userId}
    </delete>
    
    <!-- 修改用户的详细信息 -->
    <update id="adminModifyDetailsById" parameterType="com.myapp.demo.Entiy.User">
		update user set 
		realName = #{realName},telephone = #{telephone},email = #{email},address = #{address},sexy = #{sexy}
		<if test="whichUnit != null"> ,whichUnit = #{whichUnit} </if>
		where userId = #{userId}
    </update>
    
    <!-- 改密码 -->
    <update id="modifyPassword" parameterType="com.myapp.demo.Entiy.User">
		update user set password = #{password} where userId = #{userId}
    </update>
    
    <!-- TODO -->
   	<!-- 更改上次登陆时间和登录状态（上线的时候使用） -->
   	<update id="modifyloginTimeAndStatus" parameterType="com.myapp.demo.Entiy.User">
		update user set lastTimeLogin = #{lastTimeLogin}, status = "online" where userId = #{userId}
    </update>
   	<!-- 单独更改登陆状态（下线的时候用，改成offline） -->
   	<update id="modifyStatus" parameterType="com.myapp.demo.Entiy.User">
		update user set status = "offline" where userId = #{userId}
    </update>
    
</mapper>







